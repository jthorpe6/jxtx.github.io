#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
#+OPTIONS: num:0 toc:nil html-postamble:nil
#+PROPERTY: header-args :tangle yes :exports both :eval no-export :results output
 - [[file:index.html][home]]
* Emacs For Pentesters

** Why i use Emacs
So I've been using ~Emacs~ as my daily /editor/ for about 6 months now and i cant get enough of it.
I wanted to share how i made it work for me and how i now cant live without it.

Before using ~Emacs~ i never really had a favourite editor, i would know to use a GUI editor on my workstation if I'm editing a local file, and to use ~vim~ or ~nano~ if I'm editing on a server. With ~Emacs~ i can use it to do both. Another thing that would be annoying for me is that i would have to switch between a shell and an editor all the time to reference from files/scripts.

I suppose this write-up is not specific for pentesters... but i like the title :) 

** Example
The best example i can give you is if you can recall that time you were onsite and you thought you had a potential exploit but it was not working, and you were switching from your shell/editor/web browser to try find a solution or the bit your missing. I've been there, and is not nice, sure on an external you may have the office comforts (like another monitor or two), but from a laptop screen it can get messy quickly. What if i told you that ~Emacs~ can do all three, and its only one key binding to switch between them? ~Emacs~ can do much much more than that, it can be your ~IRC~ client, your file explorer, and even your mail client.

** The ansi-term 
I spend 80% of my day in the terminal, running programs / editing files and scripts. Before i would have to use ~scp~ or something similar to copy from my local workstation to a remote server. Now i just use ~Emacs~ , the ~ansi-term~ allows you to open a local shell within ~Emacs~ and from there its just like any other shell you've used. There are some key bindings you should be aware of however, the first thing i noticed when i used the ~ansi-term~ was *how do i copy and paste* . I've outlined the key bindings you need below.

| Binding             | What it does                        |
|---------------------+-------------------------------------|
| ~M-x RET ansi-term~ | Opens ~ansi-term~                   |
| ~C-c C-j~           | line (so you can move up)           |
| ~C-c C-k~           | char (feels like standard terminal) |

So to copy and paste you would would type ~C-c C-j~ then mark what you want to copy, then either hit ~RET~ or move into char mode then back o line mode to get to the clean prompt, then yank your text.

** Tramp Mode
I think this is the mode that i can no longer live without. Tramp mode allows you to edit files on a remote server from your local instance of ~Emacs~. Yep you read that right, when you use ~C-x C-f~ to find a file to open, if you type ~/ssh:you@remoteserver:/path/to/file~ ~Emacs~ will open the file in an new buffer for you, and if you need to use ~sudo~ to edit the file you can do that to like so ~/ssh@you@remoteserver|sudo:you@remoteserver:/path/to/file~ your then be asked for your ~sudo~ password before editing the file.

Tramp mode does not end there, using ~dried~ it can also act as a remote file manager. All within your /editor/.

** Org mode 
Before i started using ~Emacs~ I'd write up my notes in markdown and then uses something like ~pandoc~ to convert them to a word/HTML format (that's actually how i wrote my OSCP lab report). Org mode is another markup language and so much more. I've now moved completely away from markdown, and use Org mode for my notes (its that good). Using Org mode is kinda out of scope of this /guide/ but I'll link the cheat sheet i use [[http://orgmode.org/orgcard.txt][here]].

** Tips and Tricks 
~Emacs~ by default can be a little hard to get your head round, for me it was constantly saving backup files, that really got annoying. Another thing was that i started using ~Emacs~ like any other editor in the terminal, and i ended up loosing syntax hi-lighting and other /pretty/ features because of my shell settings. All these are /fixed/ in my [[https://gitlab.com/JxTx/dotfiles][dotfiles]]. ~Emacs~ can be very daunting to get your head around the basics, but after you've used it for a while I'm sure you wont be able to use anything other than ~Emacs~. If your like me and need a spell checker ~Emacs~ has one built in, all you need to do is activate it within your ~init.d~ file. Actually ~Emacs~ has a lot built in, but you either have to use ~M-x~ to activate it or add it to your ~init.d~ file.

Just try it out, you never know you may like it :) 
